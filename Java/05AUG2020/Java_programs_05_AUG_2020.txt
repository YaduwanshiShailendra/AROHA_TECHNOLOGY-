/*
################################################
Objective                : Java programs
Author(Creator) Name     : Shailendra Yadav
Developed / Created Date : 05-August-2020
################################################
*/


/*
 * Find out all the prime numbers say in the range of 156 to 892  For range use a = 156 and b = 892.
 */

public class PrimeNo 
{
	public static void main(String[] args) 
	{
		//initializing variable
		int a = 156 , b = 892;
		while (a < b) 
		{
			boolean flag = false;
			for(int i = 2; i <= a/2; ++i) 
			{
				// condition for non-prime number
				if(a % i == 0) 
				{
					flag = true;
					break;
				}
			}
			if (!flag)
				System.out.print(a + " ");
			++a;
		}
	}
}


/*
output
157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541 547 557 563 569 571 577 587 593 599 601 607 613 617 619 631 641 643 647 653 659 661 673 677 683 691 701 709 719 727 733 739 743 751 757 761 769 773 787 797 809 811 821 823 827 829 839 853 857 859 863 877 881 883 887
*/


______________________________________________________________________________________________________________________________________________________________

/*
 * Use this array int a[] = {89,56,155,6,125,900,4501,22,188,200,2,275,500,520,999};  // If you want you can put more numbers
 * Process the array and find out the highest , lowest number, sum all the numbers and find the avg.
 * Using the built in method in Java sort the array
 */

import java.util.Arrays;

public class Array {
	public static void main (String [] args) {
		int [] array = {89,56,155,6,125,900,4501,22,188,200,2,275,500,520,999};

		System.out.print("Entered Array: ");
		// calling disp() method
		disp(array);		
		System.out.println();		

		Arrays.sort(array); // sorting array in increasing order
		System.out.print("After sorting array: ");
		// calling disp() method
		disp(array);		
		
		// calling disp() method
		disp(array);		
		System.out.println("");
		System.out.println("Highest No. : "+ array[array.length-1]);
		System.out.println("Lowest No. : "+ array[0]);
		System.out.println("Sum of No. : "+ sum(array)); 	// calling sum() method
		System.out.println("Avg of No. : "+ sum(array)/(array.length));
		
	}

	
	// method for display elements in an array
	static void disp(int[] array) {
		// condition for iterate array
		for (int i = 0; i < array.length; i++) {
			System.out.print(array[i] + " ");
		}
	}


	// method for sum of elements in an array  
    static int sum(int array[]) 
    { 
        int sum = 0; // initialize sum 
        int i; 
       
        // Iterate through all elements and add them to sum 
        for (i = 0; i < array.length; i++) 
           sum +=  array[i]; 
       
        return sum; 
    } 
}

___________________________________________________________________________________________________________________________________________________________

/*
Display these patterns

1
2 2
3 3 3
4 4 4 4
5 5 5 5 5
*/


public class Pattern1 
{
	public static void main(String[] args) {
		for (int i = 1; i <= 5; i++) 
		{
			for (int j = 1; j <=i ; j++) 
			{
				System.out.print(i + " ");
			}
			System.out.println();
		}
	}
}

/*
Output-
1
2 2
3 3 3
4 4 4 4
5 5 5 5 5
*/




___________________________________________________________________________________________________________________________________________________________

/*
 Display these patterns

A
B C
D E F
G H I J
K L M N O
 */

public class Pattern2 
{
	public static void main(String[] args) 
	{
		char count='A';
		for (char i = 'A'; i <= 'E'; i++) 
		{
			for (char j = 'A'; j <=i ; j++) 
			{
				System.out.print(count + " ");
				count++;
			}
			System.out.println();
		}
	}
}



/*
Output-
A
B C
D E F
G H I J
K L M N O
*/


___________________________________________________________________________________________________________________________________________________________

/*
Display these patterns

15 14 13 12
11 10 9
8 7
6
*/

public class Pattern3 
{
	public static void main(String[] args) 
	{
		int count=15;
		for (int i = 5; i >= 1; i--) 
		{
			for (int j = 1; j <=i-1 ; j++) 
			{
				System.out.print(count + " ");
				count--;
			}
			System.out.println();
		}
	}
}



/*
Output-
15 14 13 12
11 10 9
8 7
6
*/


___________________________________________________________________________________________________________________________________________________________


/*
 Using collection and Math.random() * 10000 , multiply by 10000 so that the number decimal is shifted by 5 decimal place.
Generate about 500 numbers store it in LinkedList

Sort the linked list

Find the highest , lowest

Find how many are divisible by 10 and 12

Find how many are not divisible by 8 as well as 9

Do the same program using the HashSet
 
 */


import java.util.Collections;
import java.util.LinkedList;
import java.util.ListIterator;

public class LinkListProgram {

	public static void main(String[] args) {
		
		LinkedList<Integer> list = new LinkedList<Integer>();
		
		for (int i = 1; i <= 500; i++) 
		{
			list.add((int) (Math.random() * 10000));		
		}

		/*		
		Method 1 (by using iterator)
		ListIterator<Integer> litr = list.listIterator();		
		while(litr.hasNext())
		{
			Integer lst = litr.next();
			System.out.println(lst);
		}
 		
 		*/
		
		System.out.println("Befor sorting");

		//		Method 2 
		for(Integer I:list)
		{
			System.out.print(I + " ");
		}

		
		System.out.println();
		System.out.println();
		System.out.println("After sorting");
		Collections.sort(list);
		for(Integer I:list)
		{
			System.out.print(I + " ");
		}

		System.out.println();
		System.out.println();
		System.out.println("Highest value is '" + Collections.max(list) + "'");

		System.out.println();
		System.out.println("Lowest value is '" + Collections.min(list) + "'");
		
		System.out.println();
		System.out.println("Divisible by '10' and '12'");
		// checking divisible by 10 and 12
		for(Integer I:list)
		{
			if (I%10==0 && I%12==0) 
			{
				System.out.print(I + " ");
			}
		}

		System.out.println();
		System.out.println();
		System.out.println("Not divisible by '8' as well as '9'");
		// checking not divisible by 8 as well as 9
		for(Integer I:list)
		{
			if (I%8!=0 && I%9!=0) 
			{
				System.out.print(I + " ");
			}
		}
		
		
	}

}



___________________________________________________________________________________________________________________________________________________________


/*
 Using collection and Math.random() * 10000 , multiply by 10000 so that the number decimal is shifted by 5 decimal place.
Generate about 500 numbers store it in LinkedList

Sort the linked list

Find the highest , lowest

Find how many are divisible by 10 and 12

Find how many are not divisible by 8 as well as 9

Do the same program using the HashSet
 
 */

import java.util.Collections;
import java.util.HashSet;
import java.util.TreeSet;

public class HashSetProgram {

	public static void main(String[] args) {
		HashSet<Integer> set = new HashSet<Integer>();
		for (int i = 1; i <= 500; i++) 
		{
			set.add((int) (Math.random() * 10000));		
		}

		System.out.println("Befor sorting");

		//		iterating elements of sets 
		for(Integer I:set)
		{
			System.out.print(I + " ");
		}
		
		System.out.println();
		System.out.println();
		System.out.println("After sorting");
		
		// sorting by using treeset
		TreeSet<Integer> treeset = new TreeSet<Integer>(set);
		
		
		for(Integer I:treeset)
		{
			System.out.print(I + " ");
		}
		

		System.out.println();
		System.out.println();
		System.out.println("Highest value is '" + Collections.max(treeset) + "'");

		System.out.println();
		System.out.println("Lowest value is '" + Collections.min(treeset) + "'");
		
		System.out.println();
		System.out.println("Divisible by '10' and '12'");
		// checking divisible by 10 and 12
		for(Integer I:treeset)
		{
			if (I%10==0 && I%12==0) 
			{
				System.out.print(I + " ");
			}
		}

		System.out.println();
		System.out.println();
		System.out.println("Not divisible by '8' as well as '9'");
		// checking not divisible by 8 as well as 9
		for(Integer I:treeset)
		{
			if (I%8!=0 && I%9!=0) 
			{
				System.out.print(I + " ");
			}
		}
		
	}

}


___________________________________________________________________________________________________________________________________________________________



